// ------------------------------------------------------
//Workshop 6 part 2
//Name   : chinganshih
//ID     : 148221195
//Email  : cshih9@myseneca.ca
//Section: OOP345 NEE
//-----------------------------------------------------------
1. The vector is a templated class that represents dynamic arrays. Vector allocates memory and manage data structures that can change in size. When elements are added or removed, it will grow and shrink automatically. However, in workshop 6, we create std::vector<Vehicle*> m_vehicle; to store all the vehicles (the objects of Vehicle pointer)in m_vehicle collection. When we delete the vector, it will not free the memory associated with the Vehicle object to which it points. As mentioned above, we should iterate over the Vehicle objects stored in the vector and delete each one of them to avoid a memory leak.

2. In the function loadData(), I implemented try catch, if the invalid data is detected while loading data, it will throw an error and print it out. Another solution is to validate in Car constructor, if any invalid data occurs, std::curr will print out the error message ¡§Invalid record!¡¨ and we set the vehicle to be nullptr. Also, in createInstance function, if the unknown type of vehicle is found, str::curr prints out the ¡§Unrecognized record type: [" + tag + "]¡¨ and return nullptr. In loadData function, if aVehicle is not nullptr add it vertor.

3. Since we store polymorphic object in the vector container, we should construct and destruct, a vector of pointer will be useful in polymorphic object. In vector of object, the whole objects get copied to another array while automatic reallocation is occurring. If we need to keep track of them instead of copies of the objects themselves, the vector of pointer works. The vector of pointer will create another Vehicle* array and copy in the array of Vehicle* from the previous vector. To sun up, because we are managing polymorphic objects, at this point, it is better to implement the vector of pointer instead of the vector of object.
